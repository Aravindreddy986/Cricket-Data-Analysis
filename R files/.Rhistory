subject = "Error files", body = "Please find the attachment for error files ",
smtp = list(host.name = "aspmx.l.google.com", port = 25),authenticate = FALSE,
send = TRUE,attach.files = c(filepath), debug = TRUE)
errorfilepath <- paste("A:/ADBMS/Project/Datafiles/yaml/t20s/error files/",file.names[i],sep = "")
file.rename(filepath,errorfilepath)
}
)
}
############ remove all the back up new files #####################################
unlink("A:/ADBMS/Project/Datafiles/yaml/t20s/new files - Copy/*",recursive = TRUE)
odbcChannel <- odbcConnect("Cricket")
RShowDoc("RODBC", package="RODBC")
library(downloader)
odbcChannel <- odbcConnect("Cricket")
library(RODBC)
odbcChannel <- odbcConnect("Cricket")
analysis <- sqlQuery(odbcChannel,"SELECT * FROM analysis('New Zealand')")
library(rpart)
analysis <- sqlQuery(odbcChannel,"SELECT * FROM analysis('New Zealand')")
fit <- rpart( result~.,
method="class", data=analysis)
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
# plot tree
plot(fit, uniform=TRUE,
main="Classification Tree for Kyphosis")
analysist1 <- analysis[,c(-5)]
# grow tree
fit <- rpart( result~.,
method="class", data=analysist1)
summary(fit) # detailed summary of splits
plot(fit, uniform=TRUE,
main="Classification Tree for Kyphosis")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
# plot tree
plot(fit, uniform=TRUE,
main="Classification Tree for Kyphosis")
analysist1 <- analysis[,c(-1,-4,-5,-6,-11)]
# grow tree
fit <- rpart( result~.,
method="class", data=analysist1)
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
# plot tree
plot(fit, uniform=TRUE,
main="Classification Tree for Kyphosis")
# create attractive postscript plot of tree
post(fit, file = "c:/tree.ps",
title = "Classification Tree for Kyphosis")
# create attractive postscript plot of tree
post(fit,
title = "Classification Tree for Kyphosis")
# create attractive postscript plot of tree
post(fit, file = "A:/tree.ps",
title = "Classification Tree for Kyphosis")
install.packages("party")
# Load the party package. It will automatically load other dependent packages.
library(party)
# Give the chart file a name.
png(file = "decision_tree.png")
# Create the tree.
output.tree <- ctree(
result~.,
data = analysist1)
# Plot the tree.
plot(output.tree)
# Save the file.
dev.off()
# Plot the tree.
plot(output.tree)
dat <- read.delim(file.choose(), sep= ",", header = TRUE)
head(dat)
ggplot(dat, aes(x = CPI, y = HDI, size = HDI.Rank)) + geom_point()
library(ggplot2)
housing <- read.delim(file.choose(), sep= ",", header = TRUE)
housingtest <- housing
head(housing)
options(scipen = 999)
housing$Year <- as.numeric(substr(housing$Date, 1, 4))
housing$Qrtr <- as.numeric(substr(housing$Date, 5, 5))
housing$Date <- housing$Year + housing$Qrtr/4
hist(housing$Home.Value)
ggplot(housing, aes(x = Home.Value)) +
geom_histogram()
##############################################
plot(Home.Value ~ Date,
data=subset(housing, State == "MA"))
points(Home.Value ~ Date, col="green",
data=subset(housing, State == "FL"))
legend(19750, 400000,
c("MA", "TX"), title="State",
col=c("black", "red"),
pch=c(1, 1))
############################################
colnames(housing)
ggplot(subset(housing, State %in% c("MA", "TX","FL")),
aes(x=Date,
y=Home.Value,
color=State))+
geom_point()
help.search("geom_", package = "ggplot2")
##Geometric objects are the actual marks we put on a plot. Examples include:
###points (geom_point, for scatter plots, dot plots, etc)
###lines (geom_line, for time series, trend lines, etc)
###boxplot (geom_boxplot, for, well, boxplots!)
hp2001Q1 <- subset(housing, Date == 2001.25)
ggplot(hp2001Q1,
aes(y = Structure.Cost, x = Land.Value)) +
geom_point()
ggplot(hp2001Q1,
aes(y = Structure.Cost, x = log(Land.Value) ) ) +
geom_point(aes(color = Home.Value)) +
geom_smooth()
#################################################################
hp2001Q1$pred.SC <- predict(lm(Structure.Cost ~ log(Land.Value), data = hp2001Q1))
head(hp2001Q1)
p1 <- ggplot(hp2001Q1, aes(x = log(Land.Value), y = Structure.Cost))
p1 + geom_point(aes(color = Home.Value)) +
geom_line(aes(y = pred.SC))
p1 + geom_point(aes(color = Home.Value)) +
geom_smooth()
##################################################################
head(hp2001Q1)
p1 +
geom_text(aes(label=State), size = 3)
#################################################################
library("ggrepel")
p1 +
geom_point() +
geom_text(aes(label=State), size = 3)
######position (i.e., on the x and y axes)
######color ("outside" color)
######fill ("inside" color)
######shape (of points)
######linetype
######size
p1 +
geom_point(aes(shape= region, color =  Home.Value)) +
geom_text(aes(label=State), size = 3)
ggplot(dat, aes(x = CPI, y = HDI, size = HDI.Rank)) + geom_point()
ggplot(dat, aes(x = CPI, y = HDI)) +
geom_point(color = "green")
ggplot(dat, aes(x = CPI, y = HDI)) +
geom_point(aes(color= region))
ggplot(dat, aes(x = CPI, y = HDI)) +
geom_point(aes(color= Region))
ggplot(dat, aes(x = CPI, y = HDI)) +
geom_point(color = "green")
ggplot(dat, aes(x = CPI, y = HDI)) +
geom_point(aes(color= Region, size= 2))
ggplot(dat, aes(x = CPI, y = HDI)) +
geom_point(aes(color= Region), size = 2)
ggplot(dat, aes(x = CPI, y = HDI)) +
geom_point(aes(color= Region, size = HDI.Rank))
head(dat)
args(geom_histogram)
p2 <- ggplot(housing, aes(x = Home.Value))
p2 + geom_histogram()
p2 + geom_histogram(stat = "bin", binwidth = "2000")
p2 + geom_histogram(stat = "bin", binwidth = 2000)
housing.sum <- aggregate(housing["Home.Value"], housing["State"], FUN=mean)
rbind(head(housing.sum), tail(housing.sum))
ggplot(housing.sum, aes(x=State, y=Home.Value)) +
geom_bar()
View(housing.sum)
ggplot(housing.sum, aes(x=State, y=Home.Value)) +
geom_bar(stat = "identity")
ggplot(housing, aes(x=State, y=Home.Value)) +
geom_bar()
ggplot(housing, aes(x=State, y=Home.Value))
ggplot(dat, aes(x = CPI, y = HDI)) +
geom_point()
ggplot(dat, aes(x = CPI, y = HDI)) +
geom_point() +
geom_smooth()
ggplot(dat, aes(x = CPI, y = HDI)) +
geom_point() +
geom_smooth(method = "lm")
ggplot(dat, aes(x = CPI, y = HDI)) +
geom_point() +
geom_smooth(method = "loess")
ggplot(dat, aes(x = CPI, y = HDI)) +
geom_point() +
geom_smooth()
ggplot(dat, aes(x = CPI, y = HDI)) +
geom_point() +
geom_line(method = "loess")
ggplot(dat, aes(x = CPI, y = HDI)) +
geom_point() +
geom_line(stat= "smooth",method = "loess")
ggplot(dat, aes(x = CPI, y = HDI)) +
geom_point() +
geom_smooth()
?loess
ggplot(dat, aes(x = CPI, y = HDI)) +
geom_point() +
geom_smooth(span = .4)
ggplot(dat, aes(x = CPI, y = HDI)) +
geom_point() +
geom_smooth()
ggplot(dat, aes(x = CPI, y = HDI)) +
geom_point() +
geom_smooth(span = .2)
ggplot(dat, aes(x = CPI, y = HDI)) +
geom_point() +
geom_smooth(span = .4)
p3 <- ggplot(housing,
aes(x = State,
y = Home.Price.Index)) +
theme(legend.position="top",
axis.text=element_text(size = 6))
ggplot(housing,
aes(x = State,
y = Home.Price.Index)) +
theme(legend.position="top",
axis.text=element_text(size = 6))
p3 + geom_point(aes(color = Date),
alpha = 0.5,
size = 1.5,
position = position_jitter(width = 0.25, height = 0))
p4 + scale_x_discrete(name="State Abbreviation") +
scale_color_continuous(name="",
breaks = c(1976, 1994, 2013),
labels = c("'76", "'94", "'13"))
p4 <- p3 + geom_point(aes(color = Date),
alpha = 0.5,
size = 1.5,
position = position_jitter(width = 0.25, height = 0))
p4 + scale_x_discrete(name="State Abbreviation") +
scale_color_continuous(name="",
breaks = c(1976, 1994, 2013),
labels = c("'76", "'94", "'13"))
p4 +
scale_x_discrete(name="State Abbreviation") +
scale_color_continuous(name="",
breaks = c(1976, 1994, 2013),
labels = c("'76", "'94", "'13"),
low = "blue", high = "red")
p4 +
scale_color_gradient2(name="",
breaks = c(1976, 1994, 2013),
labels = c("'76", "'94", "'13"),
low = muted("blue"),
high = muted("red"),
mid = "gray60",
midpoint = 1994)
ggplot(dat, aes(x = CPI, y = HDI, color = "Region")) +
geom_point()
ggplot(dat, aes(x = CPI, y = HDI, color = "Region")) +
geom_point() +
scale_x_continuous(name = "Corruption Perception Index") +
scale_y_continuous(name = "Human Development Index") +
scale_color_discrete(name = "Region of the world")
ggplot(dat, aes(x = CPI, y = HDI, color = "Region")) +
geom_point() +
scale_x_continuous(name = "Corruption Perception Index") +
scale_y_continuous(name = "Human Development Index") +
scale_color_manual(name = "Region of the world",
values = c("#24576D",
"#099DD7",
"#28AADC",
"#248E84",
"#F2583F",
"#96503F")
)
ggplot(dat, aes(x = CPI, y = HDI, color = "Region")) +
geom_point() +
scale_x_continuous(name = "Corruption Perception Index") +
scale_y_continuous(name = "Human Development Index") +
scale_color_manual(name = "Region of the world",
values = c("#24576D",
"#099DD7",
"#28AADC",
"#248E84",
"#F2583F",
"#96503F"))
ggplot(dat, aes(x = CPI, y = HDI, color = "Region")) +
geom_point()
ggplot(dat, aes(x = CPI, y = HDI, color = "Region")) +
geom_point() +
scale_x_continuous(name = "Corruption Perception Index") +
scale_y_continuous(name = "Human Development Index") +
scale_color_manual(name = "Region of the world",
values = c("#24576D",
"#099DD7",
"#28AADC",
"#248E84",
"#F2583F",
"#96503F"))
p4 <- p3 + geom_point(aes(color = Date),
alpha = 0.5,
size = 1.5,
position = position_jitter(width = 0.25, height = 0))
p3 + geom_point(aes(color = Date),
alpha = 0.5,
size = 1.5,
position = position_jitter(width = 0.25, height = 0))
p5 <- ggplot(housing, aes(x = Date, y = Home.Value))
p5 + geom_line(aes(color = State))
p5 <- p5 + geom_line() +
facet_wrap(~State, ncol = 10)
p5
p5 + theme_linedraw()
p5 + theme_light()
p5 + theme_minimal() +
theme(text = element_text(color = "turquoise"))
p5 + theme_minimal() +
theme(text = element_text(color = "blue"))
theme_new <- theme_bw() +
theme(plot.background = element_rect(size = 1, color = "blue", fill = "black"),
text=element_text(size = 12, family = "Serif", color = "ivory"),
axis.text.y = element_text(colour = "purple"),
axis.text.x = element_text(colour = "red"),
panel.background = element_rect(fill = "pink"),
strip.background = element_rect(fill = muted("orange")))
p5 + theme_new
theme_new <- theme_bw() +
theme(plot.background = element_rect(size = 1, color = "blue", fill = "black"),
text=element_text(size = 12, family = "Serif", color = "ivory"),
axis.text.y = element_text(colour = "purple"),
axis.text.x = element_text(colour = "red"),
panel.background = element_rect(fill = "pink"),
strip.background = element_rect(fill = muted("orange")))
theme_new <- theme_bw() +
theme(plot.background = element_rect(size = 1, color = "blue", fill = "black"),
text=element_text(size = 12, family = "Serif", color = "ivory"),
axis.text.y = element_text(colour = "purple"),
axis.text.x = element_text(colour = "red"),
panel.background = element_rect(fill = "pink"),
strip.background = element_rect(fill = "orange"))
p5 + theme_new
head(housing)
head(housing)
value = "value",
key = "type",
Home.Value, Land.Value)
library(tidyr)
home.land.byyear <- gather(housing.byyear,
value = "value",
key = "type",
Home.Value, Land.Value)
housing.byyear <- aggregate(cbind(Home.Value, Land.Value) ~ Date, data = housing, mean)
library(tidyr)
home.land.byyear <- gather(housing.byyear,
value = "value",
key = "type",
Home.Value, Land.Value)
View(home.land.byyear)
View(home.land.byyear)
library(tcltk)
library(sqldf)
library(dplyr)
library(xlsx)
library(ggplot2)
library(arules)
library(rpart)
library(tcltk)
library(sqldf)
library(dplyr)
library(xlsx)
library(ggplot2)
library(arules)
library(rpart)
rate <- read.csv("A:/Data mining/Data files/health-insurance-marketplace/Rate.csv", sep =",")
BenefitsCostSharing <- read.csv("A:/Data mining/Data files/health-insurance-marketplace/BenefitsCostSharing.csv", sep =",")
network <- read.csv("A:/Data mining/Data files/health-insurance-marketplace/network.csv", sep = ",")
planattributes <- read.csv("A:/Data mining/Data files/health-insurance-marketplace/PlanAttributes.csv", sep = ",")
Businessrules <- read.csv("A:/Data mining/Data files/health-insurance-marketplace/BusinessRules.csv", sep = ",")
BenefitsCostSharingtest <- BenefitsCostSharing
head(BenefitsCostSharingtest)
colnames(BenefitsCostSharingtest)
## to get distinct benefits avaliable till now
distnbenefitname <- sqldf("select distinct  benefitname from BenefitsCostSharingtest ")
head(distnbenefitname)
ratetest <- rate
planid <- sqldf("select distinct standardcomponentid from  BenefitsCostSharingtest")
head(planid)
colnames(networktest)
worktest <- network
etworktest <- network
networktest <- network
colnames(networktest)
colnames(ratetest)
businessrulestest <- Businessrules
colnames(businessrulestest)
businessrulestestt1<- subset( businessrulestest, select = -c(BusinessYear, ImportDate, IssuerId2,VersionNum,TIN, RowNumber, IssuerId ) )
colnames(businessrulestestt1)
apriori<- apriori(businessrulestestt1, parameter = list(minlen=2, supp=0.7, conf=0.7))
rules_set<-sort(apriori, by="lift")
rules_set <- data.frame(rules_set)
head(distnbenefitname)
planid <- sqldf("select distinct standardcomponentid from  BenefitsCostSharingtest")
head(planid)
planidcnt <- sqldf("select businessyear, statecode, count(distinct benefitname), count(distinct standardcomponentid) from BenefitsCostSharingtest
group by businessyear,statecode")
head(planidcnt)
planbenefits <- sqldf("select standardcomponentid , count(benefitname)  from BenefitsCostSharingtest group by standardcomponentid ")
head(planbenefits)
planbenefits2 <- sqldf("select businessyear,statecode, standardcomponentid, count(*) from BenefitsCostSharingtest
group by businessyear,statecode, standardcomponentid
order by businessyear,statecode ")
head(planbenefits2)
planbenefits <- sqldf("select businessyear,statecode, standardcomponentid, count(ISCovered) from BenefitsCostSharingtest
where IScovered = 'Covered'
group by businessyear,statecode, standardcomponentid
order by businessyear,statecode ")
head(planbenefits)
planattributestest <- planattributes
colnames(planattributes)
ratetest <- rate
colnames(ratetest)
ratetestt1 <- ratetest[,c(-5,-6,-7,-8,-24)]
colnames(ratetestt1)
colnames(ratetest)
ratetestt1 <- ratetest[,c(-4,-5,-6,-7,-8,-24)]
colnames(ratetestt1)
distnctplanidrate <- sqldf("select distinct planid from ratetestt1")
colnames(ratetestt1)
head(ratetestt1)
unique(ratetestt1$RateEffectiveDate)
unique(ratetestt1$BusinessYear)
unique(ratetestt1$RatingAreaId)
unique(ratetestt1$Age)
ratetestt1$StateCode <- as.character(ratetestt1$StateCode)
ratetestt1$PlanId <- as.character(ratetestt1$PlanId)
ratetestt1$RatingAreaId <- as.character(ratetestt1$RatingAreaId)
ratetestt1$Tobacco <- as.character(ratetestt1Tobacco)
ratetestt1$Age <- as.character(ratetestt1$Age)
ratetestt1$Tobacco <- as.character(ratetestt1$Tobacco)
unique(ratetestt1$RatingAreaId)
unique(ratetestt1$Age)
colnames(ratetestt1)
unique(ratetestt1$IndividualRate)
ratetestFL <- subset(ratetestt1, IssuerId == "FL")
ratetestFL <- subset(ratetestt1, StateCode == "FL")
ratetestt2 <- ratetestt1[order(ratetestt1$RatingAreaId),]
head(ratetestt2)
head(ratetestFL)
ratetestFL <- ratetestFL[order(ratetestFL$RatingAreaId),]
head(ratetestFL)
View(distnctplanidrate)
View(distnctplanidrate)
ratetestFL <- ratetestFL[order(ratetestFL$Age),]
head(ratetestFL)
age0to20 <- subset(ratetestFL, Age == "0-20")
View(age0to20)
## to get distinct benefits avaliable till now
distnbenefitname <- sqldf("select distinct  benefitname from BenefitsCostSharingtest ")
head(distnbenefitname)
sqldf("select * from planbenefits where standardcomponentid = '15833FL0080001'")
sqldf("select * from planbenefits2 where standardcomponentid = '15833FL0080001'")
sqldf("select * from BenefitsCostSharingtest where standardcomponentid = '15833FL0080001'")
View(planid)
View(planidcnt)
View(planbenefits)
#dbhandle <- odbcDriverConnect('driver=SQL Server Native Client 11.0;server=(LocalDb)\\\\MSSQLLocalDB,1433;database=Cricket;trusted_connection=yes')
library(RODBC)
library(rsconnect)
library(shiny)
odbcChannel <- odbcConnect("Cricket")
RShowDoc("RODBC", package="RODBC")
upcomingmatches <- sqlQuery(odbcChannel,"SELECT * FROM todaysmatches")
cricketplayingnations <- sqlQuery(odbcChannel,"SELECT * FROM cricketplayingnations")
library(yaml)
library(xlsx)
library(tcltk)
library(stats)
library(sqldf)
library(tidyr)
library(dplyr)
library(downloader)
library(RODBC)
library(mailR)
library(rpart)
library(sendmailR)
#library(gmailr)
library(beepr)
library(devtools)
library(gmailR)
library(mygmailR)
library(mail)
library(mailR)
#library(RMySQL)
# Load the party package. It will automatically load other dependent packages.
library(party)
library(yaml)
library(xlsx)
library(tcltk)
library(stats)
library(sqldf)
library(tidyr)
library(dplyr)
library(downloader)
library(RODBC)
library(mailR)
library(rpart)
library(sendmailR)
#library(gmailr)
library(beepr)
library(devtools)
library(gmailR)
library(mygmailR)
library(mail)
library(mailR)
#library(RMySQL)
# Load the party package. It will automatically load other dependent packages.
library(party)
runApp('A:/ADBMS/Project/R files/hjgjhg.R')
runApp('A:/ADBMS/Project/R files/hjgjhg.R')
runApp('A:/ADBMS/Project/R files/hjgjhg.R')
